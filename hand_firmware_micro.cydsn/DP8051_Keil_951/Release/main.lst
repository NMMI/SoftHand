C51 COMPILER V9.51   MAIN                                                                  06/30/2017 11:55:51 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Release\main.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\main.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(NDEBUG) WL(2) PR(.\DP8051_Keil_9
                    -51\Release/main.lst) CD OT(8,SPEED) OJ(.\DP8051_Keil_951\Release\main.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          // ----------------------------------------------------------------------------
   2          // BSD 3-Clause License
   3          
   4          // Copyright (c) 2016, qbrobotics
   5          // Copyright (c) 2017, Centro "E.Piaggio"
   6          // All rights reserved.
   7          
   8          // Redistribution and use in source and binary forms, with or without
   9          // modification, are permitted provided that the following conditions are met:
  10          
  11          // * Redistributions of source code must retain the above copyright notice, this
  12          //   list of conditions and the following disclaimer.
  13          
  14          // * Redistributions in binary form must reproduce the above copyright notice,
  15          //   this list of conditions and the following disclaimer in the documentation
  16          //   and/or other materials provided with the distribution.
  17          
  18          // * Neither the name of the copyright holder nor the names of its
  19          //   contributors may be used to endorse or promote products derived from
  20          //   this software without specific prior written permission.
  21          
  22          // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23          // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24          // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25          // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26          // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27          // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28          // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29          // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30          // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31          // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32          // POSSIBILITY OF SUCH DAMAGE.
  33          // ----------------------------------------------------------------------------
  34          
  35          
  36          /**
  37          * \file         main.c
  38          *
  39          * \brief        Firmware main file.
  40          * \date         June 06, 2016
  41          * \author       qbrobotics
  42          * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  43          * \copyright    (C) 2017 Centro "E.Piaggio". All rights reserved.
  44          */
  45          
  46          /**
  47          * \mainpage     Firmware
  48          * \brief        This is the firmware of the qbHand.
  49          * \version      6.0.0
  50          *
  51          * \author       _qbrobotics_
  52          *
C51 COMPILER V9.51   MAIN                                                                  06/30/2017 11:55:51 PAGE 2   

  53          * \date         June 06, 2016
  54          *
  55          * \details      This is the firmware of the qbHand. It can control a motor and
  56          *               read its encoder. Also can read and convert analog measurements
  57          *               connected to the PSoC microcontroller.                
  58          *
  59          * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  60          * \copyright    (C) 2017 Centro "E.Piaggio". All rights reserved.
  61          *
  62          */
  63          
  64          
  65          // ----------------------------------------------------------------------------
  66          // This version changes:
  67          //      - not reported
  68          
  69          
  70          //=================================================================     includes
  71          
  72          #include <device.h>
  73          #include <globals.h> // ALL GLOBAL DEFINITIONS, STRUCTURES AND MACROS HERE
  74          #include <interruptions.h>
  75          #include <command_processing.h>
  76          #include <utils.h>
  77          
  78          //==============================================================================
  79          //                                                                 MAIN FUNCTION
  80          //==============================================================================
  81          
  82          int main()
  83          {
  84   1          // Iterator
  85   1          uint8 i;         
  86   1          
  87   1          // Variable declarations for DMA 
  88   1          
  89   1          uint8 DMA_Chan;
  90   1          uint8 DMA_TD[1];
  91   1      
  92   1          //================================     initializations - psoc and components
  93   1      
  94   1          // EEPROM
  95   1      
  96   1          EEPROM_Start();
  97   1          memRecall();                                        // recall configuration
  98   1      
  99   1          // FTDI chip enable
 100   1      
 101   1          CyDelay(100);
 102   1          FTDI_ENABLE_REG_Write(0x01);
 103   1          
 104   1          // RS485
 105   1      
 106   1          UART_RS485_Stop();                                  // stop UART
 107   1          UART_RS485_Start();                                 // start UART
 108   1          UART_RS485_Init();
 109   1      
 110   1          UART_RS485_ClearRxBuffer();
 111   1          UART_RS485_ClearTxBuffer();
 112   1      
 113   1          ISR_RS485_RX_StartEx(ISR_RS485_RX_ExInterrupt);     // RS485 isr function
 114   1          
C51 COMPILER V9.51   MAIN                                                                  06/30/2017 11:55:51 PAGE 3   

 115   1          // WATCHDOG
 116   1          
 117   1          WATCHDOG_COUNTER_Start();
 118   1          WATCHDOG_ENABLER_Write(1);                          // Initialize watchdog to disabled
 119   1          
 120   1          ISR_WATCHDOG_StartEx(ISR_WATCHDOG_Handler);         // WATCHDOG isr function    
 121   1      
 122   1          // PWM
 123   1      
 124   1          PWM_MOTORS_Start();
 125   1          PWM_MOTORS_WriteCompare1(0);
 126   1          PWM_MOTORS_WriteCompare2(0);
 127   1          MOTOR_DIR_Write(0);
 128   1          MOTOR_ON_OFF_Write(0x00);
 129   1      
 130   1      
 131   1          // SSI encoder initializations
 132   1      
 133   1          COUNTER_ENC_Start();
 134   1      
 135   1          SHIFTREG_ENC_1_Start();
 136   1          SHIFTREG_ENC_2_Start();
 137   1          SHIFTREG_ENC_3_Start();
 138   1      
 139   1          // ADC
 140   1      
 141   1          ADC_Start();                                        // start ADC
 142   1          ADC_SOC_Write(0x01);                                // Force first read cycle
 143   1         
 144   1          // DMA
 145   1          DMA_Chan = DMA_DmaInitialize(DMA_BYTES_PER_BURST, DMA_REQUEST_PER_BURST, HI16(DMA_SRC_BASE), HI16(DMA_
             -DST_BASE));
 146   1          DMA_TD[0] = CyDmaTdAllocate();                                                                        
             -  // Allocate TD
 147   1          CyDmaTdSetConfiguration(DMA_TD[0], 2 * 4, DMA_TD[0], TD_SWAP_EN | DMA__TD_TERMOUT_EN | TD_INC_DST_ADR)
             -; // DMA Configurations
 148   1          CyDmaTdSetAddress(DMA_TD[0], LO16((uint32)ADC_DEC_SAMP_PTR), LO16((uint32)ADC_buf));                  
             -  // Set Register Address
 149   1          CyDmaChSetInitialTd(DMA_Chan, DMA_TD[0]);                                                             
             -  // Initialize Channel
 150   1          
 151   1          CyDmaChEnable(DMA_Chan, 1);                                                                           
             -  // Enable DMA
 152   1      
 153   1          RS485_CTS_Write(0);                                 // Clear To Send on RS485
 154   1      
 155   1          // TIMER
 156   1      
 157   1          MY_TIMER_Start();           
 158   1          PACER_TIMER_Start();
 159   1      
 160   1          CYGlobalIntEnable;                                  // enable interrupts
 161   1      
 162   1      //========================================     initializations - clean variables
 163   1      
 164   1          RESET_COUNTERS_Write(0x00);                         // Activate encoder counters
 165   1      
 166   1          CyDelay(10);                                        // Wait for encoders to have a valid value
 167   1      
 168   1          //---------------------------------------------------  Initialize referiment structure
 169   1          for (i = NUM_OF_MOTORS; i--;) 
 170   1              g_ref.pos[i] = 0;
C51 COMPILER V9.51   MAIN                                                                  06/30/2017 11:55:51 PAGE 4   

 171   1      
 172   1      
 173   1          if (c_mem.emg_calibration_flag) {
 174   2              if ((c_mem.input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 175   2                  (c_mem.input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 176   2                  (c_mem.input_mode == INPUT_MODE_EMG_FCFS) ||
 177   2                  (c_mem.input_mode == INPUT_MODE_EMG_FCFS_ADV))
 178   2                  g_ref.onoff = 0x00;
 179   2              else
 180   2                  g_ref.onoff = c_mem.activ;
 181   2          } 
 182   1          else
 183   1              g_ref.onoff = c_mem.activ;
 184   1          
 185   1          //---------------------------------------------------  Initialize measurement structure
 186   1          for (i = NUM_OF_SENSORS; i--;) { 
 187   2              g_meas.pos[i] = 0;
 188   2              g_meas.rot[i] = 0;
 189   2          }
 190   1      
 191   1          g_refNew = g_ref;                                   // Initialize k+1 measurements structure
 192   1      
 193   1          g_ref.onoff = c_mem.activ;                          // Initalize Activation
 194   1          
 195   1          //---------------------------------------------------  Initialize emg structure
 196   1          g_meas.emg[0] = 0;
 197   1          g_meas.emg[1] = 0;
 198   1      
 199   1          MOTOR_ON_OFF_Write(g_ref.onoff);                    // Activating motors
 200   1      
 201   1          dev_pwm_limit = 0;                                  // Init PWM limit
 202   1          tension_valid = FALSE;                              // Init tension_valid BIT
 203   1      
 204   1          reset_last_value_flag = 0;
 205   1              h_status = H_NORMAL;
 206   1      
 207   1          //------------------------------------------------- Initialize package on receive from RS485
 208   1          g_rx.length = 0;
 209   1          g_rx.ready  = 0;
 210   1      
 211   1          //============================================================     main loop
 212   1      
 213   1          for(;;)
 214   1          {
 215   2              // Put the FF reset pin to LOW
 216   2              RESET_FF_Write(0x00);
 217   2      
 218   2              // Call function scheduler
 219   2              function_scheduler();
 220   2      
 221   2              //  Wait until the FF is set to 1
 222   2              while(FF_STATUS_Read() == 0){
 223   3                  // On interrupt from RS485
 224   3                  if (interrupt_flag){
 225   4                      // Reset WDT
 226   4                      WATCHDOG_REFRESH_Write(0x01);
 227   4                      // Reset flags
 228   4                      interrupt_flag = FALSE;
 229   4                      watchdog_flag = FALSE;
 230   4                      // Manage Interrupt on rs485
 231   4                      interrupt_manager();
 232   4                  }
C51 COMPILER V9.51   MAIN                                                                  06/30/2017 11:55:51 PAGE 5   

 233   3                  // On interrupt from WDT
 234   3                  else { 
 235   4                      if (watchdog_flag){
 236   5                          // Reset WDT
 237   5                          WATCHDOG_REFRESH_Write(0x01);
 238   5                          // Disactivate motors
 239   5                          g_refNew.onoff = 0x00;
 240   5                      }
 241   4                  }
 242   3              };
 243   2      
 244   2              // Command a FF reset
 245   2              RESET_FF_Write(0x01);
 246   2      
 247   2              // Wait for FF to be reset
 248   2              while(FF_STATUS_Read() == 1);
 249   2      
 250   2              if(UART_RS485_ReadRxStatus() & UART_RS485_RX_STS_SOFT_BUFF_OVER)
 251   2                  UART_RS485_ClearRxBuffer();
 252   2          }
 253   1          return 0;
 254   1      }
 255          
 256          
 257          
 258          /* [] END OF FILE */
C51 COMPILER V9.51   MAIN                                                                  06/30/2017 11:55:51 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 82
                                           ; SOURCE LINE # 83
                                           ; SOURCE LINE # 96
0000 120000      E     LCALL   EEPROM_Start
                                           ; SOURCE LINE # 97
0003 120000      E     LCALL   memRecall
                                           ; SOURCE LINE # 101
0006 E4                CLR     A
0007 7F64              MOV     R7,#064H
0009 FE                MOV     R6,A
000A FD                MOV     R5,A
000B FC                MOV     R4,A
000C 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 102
000F 7F01              MOV     R7,#01H
0011 120000      E     LCALL   _FTDI_ENABLE_REG_Write
                                           ; SOURCE LINE # 106
0014 120000      E     LCALL   UART_RS485_Stop
                                           ; SOURCE LINE # 107
0017 120000      E     LCALL   UART_RS485_Start
                                           ; SOURCE LINE # 108
001A 120000      E     LCALL   UART_RS485_Init
                                           ; SOURCE LINE # 110
001D 120000      E     LCALL   UART_RS485_ClearRxBuffer
                                           ; SOURCE LINE # 111
0020 120000      E     LCALL   UART_RS485_ClearTxBuffer
                                           ; SOURCE LINE # 113
0023 7E00        E     MOV     R6,#HIGH ISR_RS485_RX_ExInterrupt
0025 7F00        E     MOV     R7,#LOW ISR_RS485_RX_ExInterrupt
0027 120000      E     LCALL   _ISR_RS485_RX_StartEx
                                           ; SOURCE LINE # 117
002A 120000      E     LCALL   WATCHDOG_COUNTER_Start
                                           ; SOURCE LINE # 118
002D 7F01              MOV     R7,#01H
002F 120000      E     LCALL   _WATCHDOG_ENABLER_Write
                                           ; SOURCE LINE # 120
0032 7E00        E     MOV     R6,#HIGH ISR_WATCHDOG_Handler
0034 7F00        E     MOV     R7,#LOW ISR_WATCHDOG_Handler
0036 120000      E     LCALL   _ISR_WATCHDOG_StartEx
                                           ; SOURCE LINE # 124
0039 120000      E     LCALL   PWM_MOTORS_Start
                                           ; SOURCE LINE # 125
003C E4                CLR     A
003D FF                MOV     R7,A
003E 120000      E     LCALL   _PWM_MOTORS_WriteCompare1
                                           ; SOURCE LINE # 126
0041 E4                CLR     A
0042 FF                MOV     R7,A
0043 120000      E     LCALL   _PWM_MOTORS_WriteCompare2
                                           ; SOURCE LINE # 127
0046 E4                CLR     A
0047 FF                MOV     R7,A
0048 120000      E     LCALL   _MOTOR_DIR_Write
                                           ; SOURCE LINE # 128
004B E4                CLR     A
004C FF                MOV     R7,A
004D 120000      E     LCALL   _MOTOR_ON_OFF_Write
                                           ; SOURCE LINE # 133
C51 COMPILER V9.51   MAIN                                                                  06/30/2017 11:55:51 PAGE 7   

0050 120000      E     LCALL   COUNTER_ENC_Start
                                           ; SOURCE LINE # 135
0053 120000      E     LCALL   SHIFTREG_ENC_1_Start
                                           ; SOURCE LINE # 136
0056 120000      E     LCALL   SHIFTREG_ENC_2_Start
                                           ; SOURCE LINE # 137
0059 120000      E     LCALL   SHIFTREG_ENC_3_Start
                                           ; SOURCE LINE # 141
005C 120000      E     LCALL   ADC_Start
                                           ; SOURCE LINE # 142
005F 7F01              MOV     R7,#01H
0061 120000      E     LCALL   _ADC_SOC_Write
                                           ; SOURCE LINE # 145
0064 E4                CLR     A
0065 900000      E     MOV     DPTR,#?_DMA_DmaInitialize?BYTE+04H
0068 F0                MOVX    @DPTR,A
0069 A3                INC     DPTR
006A F0                MOVX    @DPTR,A
006B FB                MOV     R3,A
006C FA                MOV     R2,A
006D 7D01              MOV     R5,#01H
006F 7F02              MOV     R7,#02H
0071 120000      E     LCALL   _DMA_DmaInitialize
0074 900000      R     MOV     DPTR,#DMA_Chan
0077 EF                MOV     A,R7
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 146
0079 120000      E     LCALL   CyDmaTdAllocate
007C 900000      R     MOV     DPTR,#DMA_TD
007F EF                MOV     A,R7
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 147
0081 E0                MOVX    A,@DPTR
0082 FB                MOV     R3,A
0083 FF                MOV     R7,A
0084 900000      E     MOV     DPTR,#?_CyDmaTdSetConfiguration?BYTE+04H
0087 7486              MOV     A,#086H
0089 F0                MOVX    @DPTR,A
008A 7D08              MOV     R5,#08H
008C 7C00              MOV     R4,#00H
008E 120000      E     LCALL   _CyDmaTdSetConfiguration
                                           ; SOURCE LINE # 148
0091 7B01              MOV     R3,#01H
0093 7A00        E     MOV     R2,#HIGH ADC_buf
0095 7900        E     MOV     R1,#LOW ADC_buf
0097 E9                MOV     A,R1
0098 EA                MOV     A,R2
0099 E4                CLR     A
009A AB01              MOV     R3,AR1
009C 900000      R     MOV     DPTR,#DMA_TD
009F E0                MOVX    A,@DPTR
00A0 FF                MOV     R7,A
00A1 7D10              MOV     R5,#010H
00A3 7C4E              MOV     R4,#04EH
00A5 120000      E     LCALL   _CyDmaTdSetAddress
                                           ; SOURCE LINE # 149
00A8 900000      R     MOV     DPTR,#DMA_Chan
00AB E0                MOVX    A,@DPTR
00AC FF                MOV     R7,A
00AD A3                INC     DPTR
00AE E0                MOVX    A,@DPTR
00AF FD                MOV     R5,A
C51 COMPILER V9.51   MAIN                                                                  06/30/2017 11:55:51 PAGE 8   

00B0 120000      E     LCALL   _CyDmaChSetInitialTd
                                           ; SOURCE LINE # 151
00B3 900000      R     MOV     DPTR,#DMA_Chan
00B6 E0                MOVX    A,@DPTR
00B7 FF                MOV     R7,A
00B8 7D01              MOV     R5,#01H
00BA 120000      E     LCALL   _CyDmaChEnable
                                           ; SOURCE LINE # 153
00BD E4                CLR     A
00BE FF                MOV     R7,A
00BF 120000      E     LCALL   _RS485_CTS_Write
                                           ; SOURCE LINE # 157
00C2 120000      E     LCALL   MY_TIMER_Start
                                           ; SOURCE LINE # 158
00C5 120000      E     LCALL   PACER_TIMER_Start
                                           ; SOURCE LINE # 160
00C8 D2AF              SETB    EA
00CA 9044F4            MOV     DPTR,#044F4H
00CD 74FD              MOV     A,#0FDH
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 164
00D0 E4                CLR     A
00D1 FF                MOV     R7,A
00D2 120000      E     LCALL   _RESET_COUNTERS_Write
                                           ; SOURCE LINE # 166
00D5 E4                CLR     A
00D6 7F0A              MOV     R7,#0AH
00D8 FE                MOV     R6,A
00D9 FD                MOV     R5,A
00DA FC                MOV     R4,A
00DB 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 169
;---- Variable 'i' assigned to Register 'R3' ----
00DE 7B02              MOV     R3,#02H
00E0         ?C0001:
00E0 AF03              MOV     R7,AR3
00E2 1B                DEC     R3
00E3 EF                MOV     A,R7
00E4 6018              JZ      ?C0002
                                           ; SOURCE LINE # 170
00E6 E4                CLR     A
00E7 FF                MOV     R7,A
00E8 FE                MOV     R6,A
00E9 FD                MOV     R5,A
00EA FC                MOV     R4,A
00EB EB                MOV     A,R3
00EC 25E0              ADD     A,ACC
00EE 25E0              ADD     A,ACC
00F0 2400        E     ADD     A,#LOW g_ref
00F2 F582              MOV     DPL,A
00F4 E4                CLR     A
00F5 3400        E     ADDC    A,#HIGH g_ref
00F7 F583              MOV     DPH,A
00F9 120000      E     LCALL   ?C?LSTXDATA
00FC 80E2              SJMP    ?C0001
00FE         ?C0002:
                                           ; SOURCE LINE # 173
00FE 900000      E     MOV     DPTR,#c_mem+06FH
0101 E0                MOVX    A,@DPTR
0102 6028              JZ      ?C0003
                                           ; SOURCE LINE # 174
0104 900000      E     MOV     DPTR,#c_mem+033H
C51 COMPILER V9.51   MAIN                                                                  06/30/2017 11:55:51 PAGE 9   

0107 E0                MOVX    A,@DPTR
0108 FF                MOV     R7,A
0109 6402              XRL     A,#02H
010B 600E              JZ      ?C0005
010D EF                MOV     A,R7
010E 6403              XRL     A,#03H
0110 6009              JZ      ?C0005
0112 EF                MOV     A,R7
0113 6404              XRL     A,#04H
0115 6004              JZ      ?C0005
0117 EF                MOV     A,R7
0118 B40507            CJNE    A,#05H,?C0004
011B         ?C0005:
                                           ; SOURCE LINE # 178
011B E4                CLR     A
011C 900000      E     MOV     DPTR,#g_ref+018H
011F F0                MOVX    @DPTR,A
0120 8012              SJMP    ?C0007
0122         ?C0004:
                                           ; SOURCE LINE # 180
0122 900000      E     MOV     DPTR,#c_mem+032H
0125 E0                MOVX    A,@DPTR
0126 900000      E     MOV     DPTR,#g_ref+018H
0129 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 181
012A 8008              SJMP    ?C0007
012C         ?C0003:
                                           ; SOURCE LINE # 183
012C 900000      E     MOV     DPTR,#c_mem+032H
012F E0                MOVX    A,@DPTR
0130 900000      E     MOV     DPTR,#g_ref+018H
0133 F0                MOVX    @DPTR,A
0134         ?C0007:
                                           ; SOURCE LINE # 186
0134 7B03              MOV     R3,#03H
0136         ?C0008:
0136 AF03              MOV     R7,AR3
0138 1B                DEC     R3
0139 EF                MOV     A,R7
013A 6024              JZ      ?C0009
                                           ; SOURCE LINE # 187
013C E4                CLR     A
013D FF                MOV     R7,A
013E FE                MOV     R6,A
013F FD                MOV     R5,A
0140 FC                MOV     R4,A
0141 EB                MOV     A,R3
0142 25E0              ADD     A,ACC
0144 25E0              ADD     A,ACC
0146 2400        E     ADD     A,#LOW g_meas
0148 F582              MOV     DPL,A
014A E4                CLR     A
014B 3400        E     ADDC    A,#HIGH g_meas
014D F583              MOV     DPH,A
014F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 188
0152 7400        E     MOV     A,#LOW g_meas+014H
0154 2B                ADD     A,R3
0155 F582              MOV     DPL,A
0157 E4                CLR     A
0158 3400        E     ADDC    A,#HIGH g_meas+014H
015A F583              MOV     DPH,A
C51 COMPILER V9.51   MAIN                                                                  06/30/2017 11:55:51 PAGE 10  

015C E4                CLR     A
015D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 189
015E 80D6              SJMP    ?C0008
0160         ?C0009:
                                           ; SOURCE LINE # 191
0160 7800        E     MOV     R0,#LOW g_refNew
0162 7C00        E     MOV     R4,#HIGH g_refNew
0164 7D01              MOV     R5,#01H
0166 7B01              MOV     R3,#01H
0168 7A00        E     MOV     R2,#HIGH g_ref
016A 7900        E     MOV     R1,#LOW g_ref
016C 7E00              MOV     R6,#00H
016E 7F19              MOV     R7,#019H
0170 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 193
0173 900000      E     MOV     DPTR,#c_mem+032H
0176 E0                MOVX    A,@DPTR
0177 FF                MOV     R7,A
0178 900000      E     MOV     DPTR,#g_ref+018H
017B F0                MOVX    @DPTR,A
017C FB                MOV     R3,A
                                           ; SOURCE LINE # 196
017D E4                CLR     A
017E FF                MOV     R7,A
017F FE                MOV     R6,A
0180 FD                MOV     R5,A
0181 FC                MOV     R4,A
0182 900000      E     MOV     DPTR,#g_meas+017H
0185 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 197
0188 E4                CLR     A
0189 FF                MOV     R7,A
018A FE                MOV     R6,A
018B FD                MOV     R5,A
018C FC                MOV     R4,A
018D 900000      E     MOV     DPTR,#g_meas+01BH
0190 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 199
0193 AF03              MOV     R7,AR3
0195 120000      E     LCALL   _MOTOR_ON_OFF_Write
                                           ; SOURCE LINE # 201
0198 E4                CLR     A
0199 900000      E     MOV     DPTR,#dev_pwm_limit
019C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
019D C200        E     CLR     tension_valid
                                           ; SOURCE LINE # 204
019F C200        E     CLR     reset_last_value_flag
                                           ; SOURCE LINE # 205
01A1 F500        E     MOV     h_status,A
                                           ; SOURCE LINE # 208
01A3 900000      E     MOV     DPTR,#g_rx+080H
01A6 F0                MOVX    @DPTR,A
01A7 A3                INC     DPTR
01A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 209
01A9 900000      E     MOV     DPTR,#g_rx+084H
01AC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 213
01AD         ?C0010:
                                           ; SOURCE LINE # 214
C51 COMPILER V9.51   MAIN                                                                  06/30/2017 11:55:51 PAGE 11  

                                           ; SOURCE LINE # 216
01AD E4                CLR     A
01AE FF                MOV     R7,A
01AF 120000      E     LCALL   _RESET_FF_Write
                                           ; SOURCE LINE # 219
01B2 120000      E     LCALL   function_scheduler
01B5         ?C0012:
                                           ; SOURCE LINE # 222
01B5 120000      E     LCALL   FF_STATUS_Read
01B8 EF                MOV     A,R7
01B9 7020              JNZ     ?C0013
                                           ; SOURCE LINE # 224
01BB 30000E            JNB     interrupt_flag,?C0014
                                           ; SOURCE LINE # 226
01BE 7F01              MOV     R7,#01H
01C0 120000      E     LCALL   _WATCHDOG_REFRESH_Write
                                           ; SOURCE LINE # 228
01C3 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 229
01C5 C200        E     CLR     watchdog_flag
                                           ; SOURCE LINE # 231
01C7 120000      E     LCALL   interrupt_manager
                                           ; SOURCE LINE # 232
01CA 80E9              SJMP    ?C0012
01CC         ?C0014:
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 235
01CC 3000E6            JNB     watchdog_flag,?C0012
                                           ; SOURCE LINE # 237
01CF 7F01              MOV     R7,#01H
01D1 120000      E     LCALL   _WATCHDOG_REFRESH_Write
                                           ; SOURCE LINE # 239
01D4 E4                CLR     A
01D5 900000      E     MOV     DPTR,#g_refNew+018H
01D8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 240
                                           ; SOURCE LINE # 241
                                           ; SOURCE LINE # 242
01D9 80DA              SJMP    ?C0012
01DB         ?C0013:
                                           ; SOURCE LINE # 245
01DB 7F01              MOV     R7,#01H
01DD 120000      E     LCALL   _RESET_FF_Write
01E0         ?C0017:
                                           ; SOURCE LINE # 248
01E0 120000      E     LCALL   FF_STATUS_Read
01E3 EF                MOV     A,R7
01E4 6401              XRL     A,#01H
01E6 60F8              JZ      ?C0017
01E8         ?C0018:
                                           ; SOURCE LINE # 250
01E8 120000      E     LCALL   UART_RS485_ReadRxStatus
01EB EF                MOV     A,R7
01EC 30E7BE            JNB     ACC.7,?C0010
                                           ; SOURCE LINE # 251
01EF 120000      E     LCALL   UART_RS485_ClearRxBuffer
                                           ; SOURCE LINE # 252
01F2 80B9              SJMP    ?C0010
                                           ; SOURCE LINE # 253
                                           ; SOURCE LINE # 254
01F4         ?C0020:
01F4 22                RET     
C51 COMPILER V9.51   MAIN                                                                  06/30/2017 11:55:51 PAGE 12  

             ; FUNCTION main (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    501    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
